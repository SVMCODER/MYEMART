var firebaseConfig = {
    apiKey: "AIzaSyCOA_2bf_b1o1nXSHZO5Re5DjSD66Pa6MY",
    authDomain: "https://raona0-default-rtdb.firebaseio.com",
    projectId: "raona0",
    storageBucket: "raona0.appspot.com",
    messagingSenderId: "797719983777",
    appId: "1:797719983777:web:d7ffca1316891b51ec62e0"
  };

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();
const auth = firebase.auth();
// Function to fetch all orders
async function fetchOrders() {
 
  try {
    document.getElementById('dh').innerHTML = '<div class="loading"></div>'
    const ordersRef = db.collection("orders");
    const snapshot = await ordersRef.orderBy("timestamp", "desc").get();
    const ordersList = document.getElementById("oL");
    
    ordersList.innerHTML = ""; // Clear existing content
    
    snapshot.forEach(async (doc) => {
      const orderData = doc.data();
      const orderItem = document.createElement("div");
      orderItem.classList.add("order-itemn");
      
      let statusColor = ""; // Define variable to hold color value

      if (orderData.status === "confirmed") {
        statusColor = "green";
      } else if (orderData.status === "delivered") {
        statusColor = "blue";
        // Delete order if status is delivered
        // await db.collection("orders").doc(orderId).delete();
      } else if (orderData.status === "cancelled") {
        statusColor = "red";
      }
      orderItem.innerHTML = `
      <table>
      <th>Name</th>
      <th>Data</th>
      <tr>
          <td>Order ID</td>
          <td>${doc.id} <button class="copy-details-button" onclick="copyOrderDetails('${doc.id}')"><i class='bx bx-copy'></i></button></td>
      </tr>
      <tr>
          <td>Product ID</td>
          <td>${orderData.productId}</td>
      </tr>
      <tr>
          <td>Product Name</td>
          <td>${orderData.productTitle}</td>
      </tr>
      <tr>
          <td>Price</td>
          <td>${orderData.productPrice}</td>
      </tr>
      <tr>
          <td>Shipping Address</td>
          <td>${orderData.shippingAddress}</td>
      </tr>
      <tr>
          <td>Arriving Date</td>
          <td>${orderData.arrivingDate}</td>
      </tr>
      <tr>
          <td>Buyer Name</td>
          <td>${orderData.buyerName}</td>
      </tr>
      <tr>
          <td> Email</td>
          <td>${orderData.email}</td>
      </tr>
      <tr>
          <td> Phone Number</td>
          <td>${orderData.phoneNumber}</td>
      </tr>
      <tr>
      <td> Size</td>
      <td>${orderData.a}</td>
    </tr>
      <tr>
          <td > Status</td>
          <td style="color: ${statusColor};" id='sta'>${orderData.status}</td>
      </tr>
  </table>
  <br>
        <div align='center'>
        
        <button class="cancel-button-admin" onclick="cancelOrder('${doc.id}')"><i class='bx bx-x'></i></button>
          <button class="mark-delivered-button" onclick="markOrderAsDelivered('${doc.id}')"><i class='bx bx-cycling'></i></button>
          <button class="confirm-button-admin" onclick="confirmOrder('${doc.id}')"><i class='bx bx-check'></i></button>
           <button class="message-button" onclick="sendMessageToBuyer('${doc.id}', '${orderData.buyerName}', '${orderData.email}')"><i class='bx bx-chat'></i></button>
          <button class="delete-button-admin" onclick="deleteOrder('${doc.id}')" ><i class='bx bx-trash'></i></button>
        </div>
      `;
    
      ordersList.appendChild(orderItem);
      document.getElementById('dh').innerHTML = ''
    
    });
    
  } catch (error) {
    console.error("Error fetching orders:", error);
    Swal.fire({
      icon: 'error',
      title: 'An error occured!',
      text: 'Try again later',
    });
  }
}

// Function to delete an order
async function deleteOrder(orderId) {
  const swalResult = await Swal.fire({
    title: "Delete Order",
    text: "Are you sure you want to delete this order?",
    icon: "question",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Confirm",
    cancelButtonText: "Cancel",
  });

  if (swalResult.isConfirmed) {
    try {
      await db.collection("orders").doc(orderId).delete();
      Swal.fire({
        icon: 'success',
        title: 'Order Deleted',
        text: 'Order has been deleted successfully',
      });
      fetchOrders(); // Refresh the orders list after confirming an order
    } catch (error) {
      console.error("Error deleting order:", error);
      Swal.fire({
        icon: 'error',
        title: 'Error Deleting Order',
        text: 'An error occurred',
      });
    }
  }
}
// Fetch orders and display them when the page loads
document.addEventListener("DOMContentLoaded", async () => {
  await fetchOrders();
});

// Function to cancel an order (for admin)
async function cancelOrder(orderId) {
 

  const swalResult = await Swal.fire({
    title: "Cancel Order",
    text: "Are you sure you want to cancel this order?",
    icon: "question",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Confirm",
    cancelButtonText: "Cancel",
  });

  if (swalResult.isConfirmed) {
    try {
      await db.collection("orders").doc(orderId).update({
        status: "cancelled",
      });
      Swal.fire({
        icon: 'success',
        title: 'Order Cancelled',
        text: 'Order marked as cancelled',
      });
      fetchOrders(); // Refresh the orders list after confirming an order
    } catch (error) {
      console.error("Error cancelling order:", error);
      Swal.fire({
        icon: 'error',
        title: 'Error cancelling Order',
        text: 'An error occurred',
      });
    }
  }
}

// Function to mark an order as delivered (for admin)
async function markOrderAsDelivered(orderId) {
  

  const swalResult = await Swal.fire({
    title: "Deliver Order",
    text: "Are you sure you want to deliver this order?",
    icon: "question",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Confirm",
    cancelButtonText: "Cancel",
  });

  if (swalResult.isConfirmed) {
    try {
      await db.collection("orders").doc(orderId).update({
        status: "delivered",
      });
      Swal.fire({
        icon: 'success',
        title: 'Order Delivered',
        text: 'Order marked as delivered',
      });
      fetchOrders(); // Refresh the orders list after confirming an order
    } catch (error) {
      console.error("Error confirming order:", error);
      Swal.fire({
        icon: 'error',
        title: 'Error delivering Order',
        text: 'An error occurred',
      });
    }
  }
}

// Function to send a message to the buyer (for admin)
async function sendMessageToBuyer(orderId, buyerName, buyerEmail) {
  try {
    const orderDoc = await db.collection("orders").doc(orderId).get();
    const orderData = orderDoc.data();
    const userId = orderData.userId; // Assuming the userId is available in the order data

    Swal.fire({
      title: `Send Message to ${buyerName}`,
      html: `
        <textarea id="message" class="swal2-textarea" rows="4">‚ù§ | Thanks for your purchase, it will be delievered soon..</textarea>
        <input type="text" id="imageURL" class="swal2-input" placeholder="Image URL" value="images/logo.png">
        <br>
      `,
      showCancelButton: true,
      confirmButtonText: 'Send',
      cancelButtonText: 'Cancel',
      preConfirm: async () => {
        const message = document.getElementById('message').value;
        const imageURL = document.getElementById('imageURL').value;
        try {
          

          // Create a message document in the messages collection
          await db.collection("messages").add({
            userIds: [userId], // Assuming userIds is an array of user IDs
            message,
            imageURL,
          });

          console.log(`Message sent to ${buyerName} (${buyerEmail}): ${message}`);
          Swal.fire({
            icon: 'success',
            title: 'Message Sent',
            text: 'Your message has been sent to the buyer.',
          });
        } catch (error) {
          console.error('Error sending message:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error Sending Message',
            text: 'An error occurred while sending the message.',
          });
        }
      },
    });
  } catch (error) {
    console.error("Error fetching order data:", error);
  }
}


async function confirmOrder(orderId) {
  const swalResult = await Swal.fire({
    title: "Confirm Order",
    text: "Are you sure you want to confirm this order?",
    icon: "question",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Confirm",
    cancelButtonText: "Cancel",
  });

  if (swalResult.isConfirmed) {
    try {
      await db.collection("orders").doc(orderId).update({
        status: "confirmed",
      });
      Swal.fire({
        icon: 'success',
        title: 'Order Confirmed',
        text: 'Order marked as confirmed',
      });
      fetchOrders(); // Refresh the orders list after confirming an order
    } catch (error) {
      console.error("Error confirming order:", error);
      Swal.fire({
        icon: 'error',
        title: 'Error Confirming Order',
        text: 'An error occurred',
      });
    }
  }
}

// Function to copy order details to clipboard
function copyOrderDetails(orderId) {
  const detailsText = `Order ID: #${orderId}`

  navigator.clipboard.writeText(detailsText).then(() => {
    // Alert or provide feedback to the user
    Swal.fire({
      icon: 'success',
      title: 'Details Copied!',
      text: 'Order details have been copied to the clipboard.',
    });
  }).catch((error) => {
    console.error("Error copying order details:", error);
    Swal.fire({
      icon: 'error',
      title: 'An error occurred!',
      text: 'Failed to copy order details.',
    });
  });
}