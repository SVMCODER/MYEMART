var firebaseConfig = {
  apiKey: "AIzaSyCOA_2bf_b1o1nXSHZO5Re5DjSD66Pa6MY",
  authDomain: "https://raona0-default-rtdb.firebaseio.com",
  projectId: "raona0",
  storageBucket: "raona0.appspot.com",
  messagingSenderId: "797719983777",
  appId: "1:797719983777:web:d7ffca1316891b51ec62e0"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const storage = firebase.storage();
const db = firebase.firestore();
const auth = firebase.auth();

// Function to handle form submission and Firebase upload
const handleFormSubmit = async (formData) => {
  const productName = formData.get('productName');
  const productDesc = formData.get('productDesc');
  const productCategory = formData.get('productCategory'); // New product category field

  const price = parseFloat(formData.get('price'));
  const discount = parseFloat(formData.get('discount'));
  const originalPrice = price + discount;

  const user = auth.currentUser;

  if (user) {
    // Create a new product document
    const newProductRef = db.collection('products').doc();
    const productData = {
      userId: user.uid,
      name: productName,
      description: productDesc,
      productCategory, // Save the selected product category
      price,
      discount,
      originalPrice,
      createdAt: firebase.firestore.FieldValue.serverTimestamp(),
    };

    // Handle main image upload (required)
    const mainImageFile = formData.get('mainImage');
    const mainImageURL = await uploadImage(mainImageFile);

    if (!mainImageURL) {
      Swal.fire({
        icon: 'error',
        title: 'Main Image Required',
        text: 'Please upload a main image for your product.',
      });
      return;
    }

    // Save the main image URL as mainImage in productData
    productData.mainImage = mainImageURL;

    // Handle additional images upload (if any)
    const additionalImagesFiles = formData.getAll('additionalImages');
    const additionalImagesURLs = await Promise.all(
      additionalImagesFiles.map((file) => uploadImage(file))
    );

    // Filter out null values from additional images URLs
    const filteredAdditionalImagesURLs = additionalImagesURLs.filter(
      (url) => url !== null
    );

    // Add additional images to the product data (only if URLs are available)
    if (filteredAdditionalImagesURLs.length > 0) {
      productData.additionalImages = filteredAdditionalImagesURLs;
    }

    // Conditionally add an extra image based on the product category
    if (productCategory === 'cloth') {
      productData.additionalImages.push(
        'https://cdn.shopify.com/s/files/1/0363/2493/3763/files/SIZE_CHART-01_1_480x480.jpg?v=1676102635'
      );
    } else if (productCategory === 'footwear') {
      productData.additionalImages.push(
        'https://images.meesho.com/images/products/44363/1_512.jpg'
      );
    }

    // Show a SweetAlert progress bar for the upload
    Swal.fire({
      title: 'Uploading Product',
      text: 'Please wait while your product is being uploaded...',
      showConfirmButton: false,
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();

        // Save the product data to Firestore
        newProductRef
          .set(productData)
          .then(() => {
            Swal.fire({
              icon: 'success',
              title: 'Product Uploaded!',
              text: 'Your product has been successfully uploaded.',
            });
            // Clear the form after successful upload
          })
          .catch((error) => {
            console.error('Error uploading product:', error);
            Swal.fire({
              icon: 'error',
              title: 'Upload Failed',
              text: 'An error occurred while uploading your product.',
            });
          });
      },
    });
  } else {
    // Show error message with SweetAlert if the user is not authenticated
    await Swal.fire({
      icon: 'error',
      title: 'Authentication Required',
      text: 'You need to sign in to upload products.',
    });
  }
};

// Function to upload an image to Firebase Storage and get its URL
const uploadImage = async (imageFile) => {
  try {
    const storageRef = storage.ref();
    const imageName = Date.now() + '_' + imageFile.name;
    const imageRef = storageRef.child('product_images/' + imageName);

    // Create a SweetAlert progress bar
    const swalProgressBar = Swal.fire({
      title: 'Uploading Image',
      text: 'Please wait while the image is being uploaded...',
      showConfirmButton: false,
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      },
    });

    // Upload the image and track progress
    const uploadTask = imageRef.put(imageFile);

    uploadTask.on('state_changed', (snapshot) => {
      // Calculate the progress percentage
      const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
      // Update the progress bar's text
      swalProgressBar.update({
        text: `Uploading ${Math.round(progress)}%`,
      });
    });

    // Wait for the upload to complete
    await uploadTask;

    // Close the progress bar
    swalProgressBar.close();

    // Get the image URL
    const imageURL = await imageRef.getDownloadURL();
    return imageURL;
  } catch (error) {
    console.error('Error uploading image:', error);
    return null;
  }
};

// Handle form submission when the "Create Product" button is clicked
const createProductButton = document.getElementById('createProductButton');
createProductButton.addEventListener('click', async () => {
  const { value: formValues } = await Swal.fire({
    title: 'Create Product',
    html: `
      <form id="productForm">
        <label for="productName">Product Name:</label>
        <input type="text" name="productName" id="productName" required>

        <label for="productDesc">Product Description:</label>
        <textarea name="productDesc" id="productDesc" required></textarea>

        <label for="productCategory">Product Category:</label>
        <select name="productCategory" id="productCategory" required>
          <option value="cloth">Cloth</option>
          <option value="footwear">Footwear</option>
          <option value="other">Other</option>
        </select>

        <label for="mainImage">Main Image Upload (Required):</label>
        <input type="file" accept="image/*" name="mainImage" id="mainImage" required>

        <label for="additionalImages">Additional Images Upload (Multiple):</label>
        <input type="file" accept="image/*" name="additionalImages" id="additionalImages" multiple>
        
        <label for="price">Price:</label>
        <input type="number" step="0.01" name="price" id="price" required>

        <label for="discount">Discount:</label>
        <input type="number" step="0.01" name="discount" id="discount" required>

      </form>
    `,
    focusConfirm: false,
    preConfirm: () => {
      const formData = new FormData(document.getElementById('productForm'));
      return handleFormSubmit(formData);
    },
    showCancelButton: true,
    cancelButtonText: 'Cancel',
    confirmButtonText: 'Create',
    confirmButtonColor: '#007bff',
  });
});
